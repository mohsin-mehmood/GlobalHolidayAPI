// <auto-generated />
using System;
using GlobalPublicHolidays.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GlobalPublicHolidays.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220124153910_BankHolidayFlagAdd")]
    partial class BankHolidayFlagAdd
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CountryHolidayType", b =>
                {
                    b.Property<string>("CountriesCode")
                        .HasColumnType("nvarchar(3)");

                    b.Property<int>("HolidayTypesId")
                        .HasColumnType("int");

                    b.HasKey("CountriesCode", "HolidayTypesId");

                    b.HasIndex("HolidayTypesId");

                    b.ToTable("CountryHolidayType");
                });

            modelBuilder.Entity("GlobalPublicHolidays.Domain.Entities.Country", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Code");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("GlobalPublicHolidays.Domain.Entities.CountryRegion", b =>
                {
                    b.Property<string>("CountryCode")
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("RegionName")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("CountryCode", "RegionName");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("GlobalPublicHolidays.Domain.Entities.Holiday", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnType("datetime2");

                    b.Property<int>("HolidayTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ObservedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Region")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HolidayTypeId");

                    b.HasIndex("CountryCode", "Year", "Region")
                        .IsUnique()
                        .HasFilter("[Region] IS NOT NULL");

                    b.ToTable("Holidays");
                });

            modelBuilder.Entity("GlobalPublicHolidays.Domain.Entities.HolidayFlag", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.HasKey("Id");

                    b.ToTable("HolidayFlags");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "SHOP_CLOSING_DAY"
                        },
                        new
                        {
                            Id = 2,
                            Name = "REGIONAL_HOLIDAY"
                        },
                        new
                        {
                            Id = 3,
                            Name = "ADDITIONAL_HOLIDAY"
                        },
                        new
                        {
                            Id = 4,
                            Name = "PART_DAY_HOLIDAY"
                        },
                        new
                        {
                            Id = 5,
                            Name = "BANK_HOLIDAY"
                        });
                });

            modelBuilder.Entity("GlobalPublicHolidays.Domain.Entities.HolidayName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("HolidayId")
                        .HasColumnType("bigint");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("HolidayId");

                    b.ToTable("HolidayName");
                });

            modelBuilder.Entity("GlobalPublicHolidays.Domain.Entities.HolidayNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("HolidayId")
                        .HasColumnType("bigint");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(750)
                        .HasColumnType("nvarchar(750)");

                    b.HasKey("Id");

                    b.HasIndex("HolidayId");

                    b.ToTable("HolidayNote");
                });

            modelBuilder.Entity("GlobalPublicHolidays.Domain.Entities.HolidayType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.HasKey("Id");

                    b.ToTable("HolidayTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "public_holiday"
                        },
                        new
                        {
                            Id = 2,
                            Name = "observance"
                        },
                        new
                        {
                            Id = 3,
                            Name = "school_holiday"
                        },
                        new
                        {
                            Id = 4,
                            Name = "other_day"
                        },
                        new
                        {
                            Id = 5,
                            Name = "extra_working_day"
                        },
                        new
                        {
                            Id = 6,
                            Name = "postal_holiday"
                        });
                });

            modelBuilder.Entity("HolidayHolidayFlag", b =>
                {
                    b.Property<int>("FlagsId")
                        .HasColumnType("int");

                    b.Property<long>("HolidaysId")
                        .HasColumnType("bigint");

                    b.HasKey("FlagsId", "HolidaysId");

                    b.HasIndex("HolidaysId");

                    b.ToTable("HolidayHolidayFlag");
                });

            modelBuilder.Entity("CountryHolidayType", b =>
                {
                    b.HasOne("GlobalPublicHolidays.Domain.Entities.Country", null)
                        .WithMany()
                        .HasForeignKey("CountriesCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GlobalPublicHolidays.Domain.Entities.HolidayType", null)
                        .WithMany()
                        .HasForeignKey("HolidayTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GlobalPublicHolidays.Domain.Entities.CountryRegion", b =>
                {
                    b.HasOne("GlobalPublicHolidays.Domain.Entities.Country", "Country")
                        .WithMany("Regions")
                        .HasForeignKey("CountryCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("GlobalPublicHolidays.Domain.Entities.Holiday", b =>
                {
                    b.HasOne("GlobalPublicHolidays.Domain.Entities.HolidayType", "HolidayType")
                        .WithMany()
                        .HasForeignKey("HolidayTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HolidayType");
                });

            modelBuilder.Entity("GlobalPublicHolidays.Domain.Entities.HolidayName", b =>
                {
                    b.HasOne("GlobalPublicHolidays.Domain.Entities.Holiday", "Holiday")
                        .WithMany("Names")
                        .HasForeignKey("HolidayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Holiday");
                });

            modelBuilder.Entity("GlobalPublicHolidays.Domain.Entities.HolidayNote", b =>
                {
                    b.HasOne("GlobalPublicHolidays.Domain.Entities.Holiday", "Holiday")
                        .WithMany("Notes")
                        .HasForeignKey("HolidayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Holiday");
                });

            modelBuilder.Entity("HolidayHolidayFlag", b =>
                {
                    b.HasOne("GlobalPublicHolidays.Domain.Entities.HolidayFlag", null)
                        .WithMany()
                        .HasForeignKey("FlagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GlobalPublicHolidays.Domain.Entities.Holiday", null)
                        .WithMany()
                        .HasForeignKey("HolidaysId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GlobalPublicHolidays.Domain.Entities.Country", b =>
                {
                    b.Navigation("Regions");
                });

            modelBuilder.Entity("GlobalPublicHolidays.Domain.Entities.Holiday", b =>
                {
                    b.Navigation("Names");

                    b.Navigation("Notes");
                });
#pragma warning restore 612, 618
        }
    }
}
